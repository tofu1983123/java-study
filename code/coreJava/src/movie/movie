需求描述:
1:完成影片连锁企业租赁管理系统,可以计算每一位客户的消费金额和影片的详细信息,
    金额根据影片的类型和租赁的日期来进行计算.
2:客户把影片分成3类进行管理,A:最新电影 B:普通电影 C:儿童电影.
3:费用计算规则如下
  a:是普通电影,如果租赁期小于2天,费用为2元,如果租期大于两天,费用是租期减去2,每天1.5元.
  b:如果是新片电影,费用为每天3元
  c:是儿童电影,如果租期小于3天,费用为1.5元.如果租期大于三天,费用是租期减去3,
          每天1.5元
4:每次客户租赁电影可以为客户积累积分,规则是每次累计增加1分.如果是新片,并且
   租期大于1天,再增加1分.
5:暂且不要考虑系统界面和系统的存储问题.

目的:
    1.完成需求是一方面
    2.能够去了解面向对象的设计
Version1.0
  a.Movie电影类 属性:name电影名称,priceCode电影类型,电影类型用整数代替
  b.Rental租赁类 属性:Movie,days
  c.Customer 客户类 属性:name名字,对象数组:容器,存放多个租赁
Version2.0
  在第一个版本中,容器的操作没有细致的处理(容器的初始大小给定了,租赁的影片重复)
  如果把容器的扩容,判断是否存在等操作都放入到Customer类中,Customer类就会
  比较臃肿,类的功能应该是单一(设计:单一职责原则)
  把容器的管理单独写一个类操作:
  MyArrayList 
  1.操作扩容添加元素,查找某个元素,判断是否包含
  2.容器提供遍历的方式(设计:如果你提供一个聚集,就应该提供遍历所有元素和查找某个元素的方式.模式:迭代器)
  修改Customer类
 大家把容器进一步扩展,比如插入元素到某个位置,移除元素
 Version3.0
   问题:customer类中,printMessage方法显得过于臃肿
        函数的功能也应该单一
        既做了打印,又计算了积分,还做了计算价钱.
        完全以写多个方法.
      1.抽取getPrice方法,注意eclipse工具的使用
      2.抽取getFre方法
      3.抽取出的函数有没有什么问题
Version4.0
  问题:version3进行简单的重构之后,调理已经比较清晰
          但是发现getPrice方法,getFre方法,所要用到的数据都来自于Rental类
          数据都来自于别人的.相当于人在黑板上画圆,画圆的行为应该给哪个类?
          在面向对象的设计中,谁拥有数据,谁就拥有行为.(否则就是类封装的有问题,
          总在访问别人的数据,破坏封装性,特别是这种行为中的数据都是来自其它的一个类中,
          代码的坏味道的一种)
          通过eclipse---->refactor---->move---->进行选择
          方法经过移动首先移入到了Rental类中
          移入之后我们发现最重要的数据还是来自Movie类,
          只是天数来自Rental类,而Movie数据的操作要复杂很多
          所以需要继续移动方法
          
          到了这里我们才把正确的类设计好---->我们是通过重构的方式设计好的
          将来应该通过这样的方式积累能够直接设计出
Version5.0
    Movie 中的getPrice方法
	a.其实还是比较庞大,并且有复杂的switch...case
         每个case可以认为是一种业务处理,现在业务简单,如果将来业务非常复杂,需要复杂
         的运算,并且需要去数据库取数据等等,就会使得Movie类变得更庞大.
    b.如果某种分支计算价格的方式发生变化,需要去庞大的分支中去寻找.而且也是直接
         在Movie类中修改.
         有这种想法:
                 一开始就不应该用状态码,应该用继承来设计
       Movie类,其中getPrice和getFre抽象方法
                 下面三个子类分别是ChildrenMovie,RMovie,NewMovie
                 分别重写getPrice和getFre
                 这样设计暂时有个麻烦:一旦NewMovie创建出来,
                 永远就是NewMovie对象,而实际上,新电影可能将来会变成其他电影
                 一个对象一旦创建,是不能改变它所属的类的.
                 
                 找出的变化:由于电影的种类发生变化,价钱的计算发生了变化,而积分也一样.
                 抽象:抽取Price类
                           三个子类ChildrenMoviePrice,NewMoviePrice,RMoviePrice
                           
总结:将来写程序希望可以尽量的可扩展,但是对于原来的代码尽量少修改,因为一旦修改以前
          的代码,就意味着要重新编译,测试,发布等工作
          
          涉及到了:重构,设计模式,设计理念
                 