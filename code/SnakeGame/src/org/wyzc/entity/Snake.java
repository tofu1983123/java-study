package org.wyzc.entity;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.LinkedList;

import org.wyzc.listener.SankeListener;
import org.wyzc.util.Global;

/**
 * 蛇
 * @author Administrator
 *
 */
public class Snake {
	private SankeListener snakeListener;
	private boolean life = true;
	private LinkedList<Point> body = new LinkedList<Point>();
	public static final int UP = 1;
	public static final int DOWN = -1;
	public static final int LEFT = 3;
	public static final int RIGHT = -3;
	//private int direction;//存储当前方向
	private int oldDirection,newDirection;
	private Point tail;//存储尾巴
	public Snake(){
		init();
	}
	private void init(){
		int x = Global.WIDTH/2;
		int y = Global.HEIGHT/2;
		for(int i = 0;i < 3;i++){
			body.add(new Point(x-i,y));
		}
		this.oldDirection = this.newDirection = RIGHT;
	}
	/**
	 * 蛇移动的方法
	 */
	public void move(){
		//去尾巴
		tail = body.removeLast();
		//加头---->先要得到当前的头部
		int x = body.getFirst().x;
		int y = body.getFirst().y;
		/*
		 * 获得新的头部
		 * 要确定方向,才能知道新的头部
		 * 在初始化构造蛇身的时候,默认的方向其实认为是向右的.
		 * 我们定义出所有的方向.
		 * 并完成changeDirection方法
		 * */
		if(this.oldDirection + this.newDirection != 0)
		this.oldDirection = this.newDirection;
		switch (oldDirection) {
		case UP:
			y--;
			if(y < 0)
				y = Global.HEIGHT - 1;
			break;
		case DOWN:
			y++;
			if(y >= Global.HEIGHT)
				y = 0;
			break;
		case LEFT:
			x--;
			if(x < 0)
				x = Global.WIDTH - 1;
			break;
		case RIGHT:
			x++;
			if(x >= Global.WIDTH)
				x = 0;
			break;
		}
		body.addFirst(new Point(x,y));
		System.out.println("蛇正在移动...");
	}
	/**
	 * 蛇吃食物的方法
	 * 去掉的尾巴加回来即可
	 * @param food
	 */
	public void eatFood(Food food){
		body.addLast(tail);
		System.out.println("蛇正在吃食物...");
	}
	/**
	 * 蛇改变方向的方法
	 */
	public void changeDirection(int direction){
		this.newDirection = direction;
		System.out.println("蛇正在改变方向...");
	}
	/**
	 * 蛇画出自己的方法
	 */
	public void drawMe(Graphics g){
		System.out.println("蛇正在画出自己...");
		g.setColor(Color.blue);
		for(Point p:body){
			g.fill3DRect(p.x*Global.CELL_SIZE, p.y*Global.CELL_SIZE, Global.CELL_SIZE, Global.CELL_SIZE, true);
		}
	}
	/**
	 * 蛇是否吃到自己
	 * @return
	 */
	public boolean isEatSelf(){
		for(int i = 1;i < body.size();i++){
			if(body.get(i).equals(getHead())){
				return true;
			}
		}
		return false;
	}
	public void addSnakeListener(SankeListener snakeListener){
		if(snakeListener != null){
			this.snakeListener = snakeListener;
		}
	}
	public void start(){
		new SnakeDriver().start();
	}
	/**
	 * 获取蛇头
	 * @return
	 */
	public Point getHead(){
		return body.getFirst();
	}
	public void setLife(boolean life) {
		this.life = life;
	}
	private class SnakeDriver extends Thread{
		public void run() {
			while(true){
				move();
				snakeListener.snakeMoved(Snake.this);
				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
}
